const fse = require('fs-extra');
const {usedIcons} = require('./used-icons-list.json');

const warning =
  '// This file is automatically generated do not modify it. See scripts/generate-icons/index.js';

const toKebabCase = str =>
  str
    .match(/[A-Z]{2,}(?=[A-Z][a-z0-9]*|\b)|[A-Z]?[a-z0-9]*|[A-Z]|[0-9]+/g)
    .filter(Boolean)
    .map(x => x.toLowerCase())
    .join('-');

const toFileData = (iconSet, iconName, fromSubfolder) => {
  const componentName = iconSet + iconName;
  const fileName = toKebabCase(componentName);
  const fileBody = `${warning}
import {${iconName}} from '@emotion-icons/${fromSubfolder}/${iconName}';
import {toNewsKitIcon} from '../../to-newskit-icon';

// The updated display name will be used to return the right icon in
// "to-newskit-icon.tsx", if it gets overridden
${iconName}['displayName'] = "${componentName}";

export const ${componentName} = toNewsKitIcon(${iconName});
`;
  return {fileName, fileBody, componentName};
};

const toExportStatement = file =>
  `export {${file.componentName}} from './${file.fileName}';`;

const wipeFolder = iconSubfolder => {
  fse.emptyDirSync(`./src/icons/${iconSubfolder}`);
};

const generateIconFiles = (filesData, iconSubfolder) => {
  const iconsDirectory = './src/icons/';
  filesData.forEach(data =>
    fse.writeFile(
      `${iconsDirectory + iconSubfolder}/${data.fileName}.tsx`,
      data.fileBody,
      // eslint-disable-next-line
      err => err && console.error(err),
    ),
  );
};

const generateIndexFile = (filesData, iconSubfolder) => {
  const exportBody = [warning, ...filesData.map(toExportStatement)].join('\n');
  fse.writeFile(
    `./src/icons/${iconSubfolder}/index.ts`,
    exportBody,
    // eslint-disable-next-line
    err => err && console.error(err),
  );
};

const generateFiles = (
  icons,
  fromSubfolder,
  toSubfolder,
  namingPrefix = 'Icon',
) => {
  const filesData = icons.map(iconName =>
    toFileData(namingPrefix, iconName, fromSubfolder),
  );
  wipeFolder(toSubfolder);
  generateIconFiles(filesData, toSubfolder);
  generateIndexFile(filesData, toSubfolder);
};

const generateIcons = () => {
  generateFiles(usedIcons, 'material', 'filled/material', 'IconFilled');
  generateFiles(
    usedIcons,
    'material-outlined',
    'outlined/material',
    'IconOutlined',
  );
};

generateIcons();
