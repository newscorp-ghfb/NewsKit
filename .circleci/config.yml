version: 2.1

orbs:
  slack: circleci/slack@4.10.1
  aws-cli: circleci/aws-cli@3.1
  github-cli: circleci/github-cli@1.0.4
  node: circleci/node@5.1.0

slack_notify: &slack_notify
  event: 'fail'
  channel: '#newskit-all-team'
  mentions: '@newskitdevs'
  branch_pattern: 'main'
  # The following tag_pattern allows slack messages to be sent also when workflows are triggered by tags.
  # Such as in the release process. The tags MUST mirror the one used by release workflows filters.
  tag_pattern: 'trigger-release@([0-9])(\.([0-9])){2}, v([0-9])(\.([0-9])){2}'
  custom: |
    {
      "blocks": [
        {
          "type": "section",
          "text": {
            "type": "mrkdwn",
            "text": ":red_circle: A *${CIRCLE_JOB}* job has failed!"
          }
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Project*: $CIRCLE_PROJECT_REPONAME"
            },
            {
              "type": "mrkdwn",
              "text": "*Branch*: $CIRCLE_BRANCH"
            },
            {
              "type": "mrkdwn",
              "text": "*Author*: $CIRCLE_USERNAME"
            },
            {
              "type": "mrkdwn",
              "text": "*Tag*: $CIRCLE_TAG"
            }
          ]
        },
        {
          "type": "section",
          "fields": [
            {
              "type": "mrkdwn",
              "text": "*Mentions*: $SLACK_PARAM_MENTIONS"
            }
          ]
        },
        {
          "type": "actions",
          "elements": [
            {
              "type": "button",
              "text": {
                "type": "plain_text",
                "text": "View Job"
              },
              "url": "${CIRCLE_BUILD_URL}"
            }
          ]
        }
      ]
    }

cypress_defaults: &cypress_defaults
  environment:
    CYPRESS_CACHE_FOLDER: '~/project/.cache/Cypress'

executors:
  # A basic image with just raw Alpine on it that you can run commands on
  base:
    docker:
      - image: cimg/base:latest

  # Having both AWS and Terraform on the same image makes it easier to run commands via OIDC
  aws-cli-and-terraform:
    docker:
      - image: newsuk/terraform:1.2.1
    resource_class: large

  node:
    docker:
      - image: cimg/node:16.13.2-browsers

  node-large:
    docker:
      - image: cimg/node:16.13.2-browsers
    resource_class: large
    environment:
      NODE_OPTIONS: --max_old_space_size=7680

  node-xlarge:
    docker:
      - image: cimg/node:16.13.2-browsers
    resource_class: xlarge
    environment:
      NODE_OPTIONS: --max_old_space_size=15872

  cypress:
    docker:
      - image: cypress/browsers:node16.13.0-chrome95-ff94
    resource_class: xlarge

  java:
    docker:
      - image: cimg/openjdk:8u252-jdk-buster

commands:
  terraform_init_oidc:
    description: Run Terraform Init
    parameters:
      aws_region:
        description: AWS Region
        type: string
        default: '${AWS_DEFAULT_REGION}'
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: '${S3_AWS_ASSUME_ROLE_ARN}'
      package:
        type: string
      session_context:
        type: string
        default: s3
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ''
    steps:
      - run:
          name: Terraform init OIDC
          command: |
            export AWS_DEFAULT_REGION=<< parameters.aws_region >>
            # use the OpenID Connect token to obtain AWS credentials
            (aws sts assume-role-with-web-identity \
              --role-arn << parameters.aws_assume_role_arn >> \
              --role-session-name "${CIRCLE_WORKFLOW_ID}-<< parameters.session_context >>-tf" \
              --web-identity-token $CIRCLE_OIDC_TOKEN \
              --duration-seconds 3600 \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text) > assume-tf.txt
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN < assume-tf.txt
            export AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            cd terraform/<< parameters.package >>
            export TF_LOG="TRACE"
            export TF_LOG_PATH="./terraform-debug.log"
            terraform init << parameters.terraform_arg >>

  # Deprecated by terraform_init_oidc
  terraform_init:
    description: Run Terraform Init
    parameters:
      package:
        type: string
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ''
    steps:
      - run:
          name: Terraform init
          command: |
            source $BASH_ENV
            cd terraform/<< parameters.package >>
            terraform init << parameters.terraform_arg >>

  terraform_plan_oidc:
    description: Run Terraform Plan
    parameters:
      aws_region:
        description: AWS Region
        type: string
        default: '${AWS_DEFAULT_REGION}'
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: '${S3_AWS_ASSUME_ROLE_ARN}'
      package:
        type: string
      session_context:
        type: string
        default: s3
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ''
    steps:
      - run:
          name: Terraform plan OIDC
          command: |
            export AWS_DEFAULT_REGION=<< parameters.aws_region >>
            # use the OpenID Connect token to obtain AWS credentials
            (aws sts assume-role-with-web-identity \
              --role-arn << parameters.aws_assume_role_arn >> \
              --role-session-name "${CIRCLE_WORKFLOW_ID}-<< parameters.session_context >>-tf" \
              --web-identity-token $CIRCLE_OIDC_TOKEN \
              --duration-seconds 3600 \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text) > assume-tf.txt
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN < assume-tf.txt
            export AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            cd terraform/<< parameters.package >>
            export TF_LOG="TRACE"
            export TF_LOG_PATH="./terraform-debug.log"
            terraform plan -out=tfplan -input=false << parameters.terraform_arg >>

  # Deprecated by terraform_plan_oidc
  terraform_plan:
    description: Run Terraform Plan
    parameters:
      package:
        type: string
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ''
    steps:
      - run:
          name: Terraform plan
          command: |
            source $BASH_ENV
            cd terraform/<< parameters.package >>
            terraform plan -out=tfplan -input=false << parameters.terraform_arg >>

  terraform_apply_oidc:
    description: Run Terraform Apply
    parameters:
      aws_region:
        description: AWS Region
        type: string
        default: '${AWS_DEFAULT_REGION}'
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: '${S3_AWS_ASSUME_ROLE_ARN}'
      package:
        type: string
      session_context:
        type: string
        default: s3
      terraform_arg:
        description: provide terraform arguments
        type: string
        default: ''
    steps:
      - run:
          name: Terraform apply OIDC
          command: |
            export AWS_DEFAULT_REGION=<< parameters.aws_region >>
            # use the OpenID Connect token to obtain AWS credentials
            (aws sts assume-role-with-web-identity \
              --role-arn << parameters.aws_assume_role_arn >> \
              --role-session-name "${CIRCLE_WORKFLOW_ID}-<< parameters.session_context >>-tf" \
              --web-identity-token $CIRCLE_OIDC_TOKEN \
              --duration-seconds 3600 \
              --query 'Credentials.[AccessKeyId,SecretAccessKey,SessionToken]' \
              --output text) > assume-tf.txt
            read -r AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN < assume-tf.txt
            export AWS_DEFAULT_REGION AWS_ACCESS_KEY_ID AWS_SECRET_ACCESS_KEY AWS_SESSION_TOKEN
            cd terraform/<< parameters.package >>
            export TF_LOG="TRACE"
            export TF_LOG_PATH="./terraform-debug.log"
            terraform apply -lock=false -input=false tfplan

  # Deprecated by terraform_apply_oidc
  terraform_apply:
    description: Run Terraform Apply
    parameters:
      package:
        type: string
    steps:
      - run:
          name: Terraform apply
          command: |
            source $BASH_ENV
            cd terraform/<< parameters.package >>
            terraform apply -auto-approve -lock=false -input=false tfplan

  aws_assume_role:
    description: Assume AWS role
    parameters:
      aws_access_key_id:
        description: AWS Access Key Id
        type: string
        default: '${AWS_ACCESS_KEY_ID}'
      aws_secret_key:
        description: AWS Secret Key
        type: string
        default: '${AWS_SECRET_ACCESS_KEY}'
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: '${AWS_ASSUME_ROLE_ARN}'
      job_type:
        description: The job type to be used
        type: string
        default: 'default'
    steps:
      - run:
          name: Assume role
          command: |
            export AWS_ACCESS_KEY_ID=<< parameters.aws_access_key_id >>
            export AWS_SECRET_ACCESS_KEY=<< parameters.aws_secret_key >>
            export temp_role=$(aws sts assume-role \
                    --role-arn "<< parameters.aws_assume_role_arn >>" \
                    --role-session-name "circle-ci-assume")
            export AWS_ACCESS_KEY_ID_TEMP=$(echo $temp_role | jq .Credentials.AccessKeyId | xargs)
            export AWS_SECRET_ACCESS_KEY_TEMP=$(echo $temp_role | jq .Credentials.SecretAccessKey | xargs)
            export AWS_SESSION_TOKEN_TEMP=$(echo $temp_role | jq .Credentials.SessionToken | xargs)
            echo "export AWS_ACCESS_KEY_ID=$AWS_ACCESS_KEY_ID_TEMP" >> $BASH_ENV
            echo "export AWS_SECRET_ACCESS_KEY=$AWS_SECRET_ACCESS_KEY_TEMP" >> $BASH_ENV
            echo "export AWS_SESSION_TOKEN=$AWS_SESSION_TOKEN_TEMP" >> $BASH_ENV
            source $BASH_ENV
            cat $BASH_ENV | grep AWS_ACCESS_KEY_ID >> assume_role_creds_<< parameters.job_type >>.txt
            cat $BASH_ENV | grep AWS_SECRET_ACCESS_KEY >> assume_role_creds_<< parameters.job_type >>.txt
            cat $BASH_ENV | grep AWS_SESSION_TOKEN >> assume_role_creds_<< parameters.job_type >>.txt
      - persist_to_workspace:
          root: ./
          paths:
            - assume_role_creds_<< parameters.job_type >>.txt

  aws_assume_role_file:
    description: Assume AWS role from the workspace file
    parameters:
      job_type:
        description: The job type to be used
        type: string
        default: 'default'
    steps:
      - run:
          name: Assume role file
          command: |
            cat assume_role_creds_<< parameters.job_type >>.txt >> $BASH_ENV
            source $BASH_ENV

  # Best to remove "circleci-agent step halt" line while doing testing of CircleCI code
  # to ensure that Terraform is validated at the pull_request stage
  run_only_on_folder_change:
    description: checks whether there is change on the folder in last two commits.
    parameters:
      folder:
        description: Path to folder
        type: string
    steps:
      - run:
          name: Skip if there are no changes
          command: |
            if git rev-parse --abbrev-ref HEAD | egrep -q '^release.*'; then
              currentTag=$(git tag --sort=-version:refname |  sed '1q;d')
              previousTag=$(git tag --sort=-version:refname |  sed '2q;d')
              export CHANGES=$(git diff --name-only $previousTag $currentTag << parameters.folder >> 2>&1)
            else
              if [ -n "<< pipeline.git.base_revision >>" ]; then
                export CHANGES=$(git diff --name-only << pipeline.git.base_revision >> << pipeline.git.revision >> << parameters.folder >> 2>&1)
              else
               export CHANGES=$(git diff --name-only HEAD~1 << pipeline.git.revision >> << parameters.folder >> 2>&1)
              fi
            fi
            if [ -n "$CHANGES" ]; then
              echo "Terraform << parameters.folder >> changed"
            else
              echo "Skipping as there are no changes to << parameters.folder >>"
              circleci-agent step halt
            fi

  checkout_and_attach_workspace:
    description: 'Checkout the code and project files'
    steps:
      - checkout
      - attach_workspace:
          at: ~/project

  run_test_visual_docs_percy:
    description: 'Run the Percy tests for docs visual changes'
    steps:
      - run:
          name: Set percy/newskit-docsite token
          command: echo "export PERCY_TOKEN=${PERCY_DOCSITE_TOKEN}" >> $BASH_ENV
      - run:
          name: Run Percy Docs Site Visual Tests
          command: make e2e_visual_test_docs_percy
      - store_artifacts:
          path: cypress/screenshots

  run_test_visual_comps_percy:
    description: 'Run the Percy tests for comps visual changes'
    steps:
      - run:
          name: Set percy/newskit-comps token
          command: echo "export PERCY_TOKEN=${PERCY_COMPS_TOKEN}" >> $BASH_ENV
      - run:
          name: Run Percy Storybook Component Tests
          command: make comps_visual_test_percy

  skip_test_visual_comps_percy:
    description: 'Run a single empty test to skip the comps visual changes suite'
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Set percy/newskit-comps token
          command: echo "export PERCY_TOKEN=${PERCY_COMPS_TOKEN}" >> $BASH_ENV
      - run:
          name: 'Skip the required Percy check for the newskit-comps project'
          command: yarn test:visual:comps:ci:percy:skip

  skip_test_visual_docs_percy:
    description: 'Run a single empty test to skip the docsite visual changes suite'
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Set percy/newskit-docsite token
          command: echo "export PERCY_TOKEN=${PERCY_DOCSITE_TOKEN}" >> $BASH_ENV
      - run:
          name: 'Skip the required Percy check for the newskit-docsite project'
          command: yarn e2e:visual:docs:ci:percy:skip

jobs:
  can_i_merge_checker:
    executor: node
    steps:
      - run:
          name: 'Check to make sure all tests have run before merging.'
          command: echo 'passed'
  install_deps:
    executor: node-large
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-build-v1-{{ checksum "yarn.lock" }}
            - yarn-build-v1-
      - run:
          name: Dependencies Install
          command: make install
      - save_cache:
          key: yarn-build-v1-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
      - persist_to_workspace:
          root: ./
          paths:
            - node_modules/*
            - .storybook/private-fonts
            - src/version-number.json
      - slack/notify:
          <<: *slack_notify

  install_cypress:
    <<: *cypress_defaults
    executor: cypress
    steps:
      - checkout
      - restore_cache:
          keys:
            - v1-cypress-{{ checksum "yarn.lock" }}
      - attach_workspace:
          at: ~/project
      - run:
          name: install cypress
          command: make install_cypress
      - save_cache:
          key: v1-cypress-{{ checksum "yarn.lock" }}
          paths:
            - ~/.cache
      - persist_to_workspace:
          root: ~/project
          paths:
            - .cache
            - cypress/*
      - slack/notify:
          <<: *slack_notify

  build_icons:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: make build_icons
      - persist_to_workspace:
          root: ./
          paths:
            - src/icons/*
      - slack/notify:
          <<: *slack_notify

  build_components:
    executor: node-large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: make build_components
      - persist_to_workspace:
          root: ./
          paths:
            - dist/*
      - slack/notify:
          <<: *slack_notify

  build_storybook:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: make build_storybook
      - persist_to_workspace:
          root: ./
          paths:
            - dist-storybook/*
      - slack/notify:
          <<: *slack_notify

  build_docs:
    executor: node-xlarge
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: |
            export SITE_ENV=${SITE_ENV}
            export SITE_BASE_URL=${SITE_BASE_URL}
            make build_docs
      - persist_to_workspace:
          root: ./
          paths:
            - public/*
      - slack/notify:
          <<: *slack_notify

  # Deprecated by build_docs_with_no_base_url
  build_docs_pr_with_no_base_url:
    executor: node-xlarge
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: |
            export SITE_ENV=${SITE_ENV}
            make build_docs_with_no_base_url
      - persist_to_workspace:
          root: ./
          paths:
            - public/*
      - slack/notify:
          <<: *slack_notify

  build_docs_with_no_base_url:
    executor: node-xlarge
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build
          command: |
            export SITE_ENV=${SITE_ENV}
            make build_docs_with_no_base_url
      - persist_to_workspace:
          root: ./
          paths:
            - public/*
      - slack/notify:
          <<: *slack_notify

  build_test_e2e:
    executor: node-xlarge
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Build E2E Tests
          command: yarn e2e:build
      - persist_to_workspace:
          root: ./
          paths:
            - e2e/dist/*
            - cypress/config/a11y-components.json
      - slack/notify:
          <<: *slack_notify

  test_unit_comps:
    executor: node-large
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Unit Testing
          command: make unit_test_comps
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
      - slack/notify:
          <<: *slack_notify

  test_unit_docs:
    executor: node-xlarge
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Unit Testing
          command: make unit_test_docs
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/junit/
      - run:
          name: Check component statuses match code tags
          command: yarn test:comp-statuses
      - store_test_results:
          path: ./reports/junit/
      - store_artifacts:
          path: ./reports/junit
      - slack/notify:
          <<: *slack_notify

  lint:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Lint
          command: make lint
      - slack/notify:
          <<: *slack_notify

  test_broken_links_docs:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Broken Links
          command: make check_broken_links_docs
      - slack/notify:
          <<: *slack_notify

  init_aws:
    parameters:
      job_type:
        type: string
        default: 'default'
    executor: aws-cli-and-terraform
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - slack/notify:
          <<: *slack_notify

  deploy_terraform_oidc:
    parameters:
      package:
        type: string
      apply:
        type: boolean
        default: true
      tf_env:
        type: boolean
        default: true
      environment:
        type: string
        default: ''
    executor: aws-cli-and-terraform
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run_only_on_folder_change:
          folder: ./terraform/<< parameters.package >>
      - when:
          condition: << parameters.tf_env >>
          steps:
            - terraform_init_oidc:
                package: << parameters.package >>
                terraform_arg: -backend-config="key=newskit/<< parameters.package >>/<< parameters.environment >>/terraform.tfstate"
            - terraform_plan_oidc:
                package: << parameters.package >>
                terraform_arg: -var-file=<< parameters.environment >>.tfvars
      - unless:
          condition: << parameters.tf_env >>
          steps:
            - terraform_init_oidc:
                package: << parameters.package >>
                terraform_arg: -backend-config="key=newskit/<< parameters.package >>/terraform.tfstate"
            - terraform_plan_oidc:
                package: << parameters.package >>
      - when:
          condition: << parameters.apply >>
          steps:
            - terraform_apply_oidc:
                package: << parameters.package >>

  test_visual_comps_percy:
    executor: node-large
    steps:
      - checkout_and_attach_workspace
      - run_test_visual_comps_percy

  comps_tests_conditional_run_to_update_baselines:
    # if there are any visual diffs we need to run the Percy comps tests to update the baselines
    executor: node-large
    steps:
      - checkout_and_attach_workspace
      - github-cli/setup
      - run:
          name: 'Check if updates required'
          command: |
            {
                export PR_BRANCH_NAME=$(gh pr list --search $CIRCLE_SHA1 --state merged --json headRefName --jq '.[].headRefName') &&
                echo "Found branch name: ${PR_BRANCH_NAME}" &&
                node scripts/check-baseline-updates.js $PR_BRANCH_NAME "comps" &&
                echo "No baseline updates required; finishing job." &&
                circleci-agent step halt
            } || {
                echo "Baseline updates required; continuing job."
            }
      - run_test_visual_comps_percy
      - slack/notify:
          <<: *slack_notify

  docsite_tests_conditional_run_to_update_baselines:
    # if there are any visual diffs we need to run the Percy docsite tests to update the baselines
    <<: *cypress_defaults
    executor: cypress
    steps:
      - checkout_and_attach_workspace
      - github-cli/setup
      - run:
          name: 'Check if updates required'
          command: |
            {
                export PR_BRANCH_NAME=$(gh pr list --search $CIRCLE_SHA1 --state merged --json headRefName --jq '.[].headRefName') &&
                echo "Found branch name: ${PR_BRANCH_NAME}" &&
                node scripts/check-baseline-updates.js $PR_BRANCH_NAME "docsite" &&
                echo "No baseline updates required; finishing job." &&
                circleci-agent step halt
            } || {
                echo "Baseline updates required; continuing job."
            }
      - run_test_visual_docs_percy
      - slack/notify:
          <<: *slack_notify

  skip_percy_comps_check:
    executor: node
    steps:
      - skip_test_visual_comps_percy

  skip_percy_comps_check_2:
    executor: node
    steps:
      - skip_test_visual_comps_percy

  skip_percy_docsite_check:
    <<: *cypress_defaults
    executor: cypress
    steps:
      - skip_test_visual_docs_percy

  test_visual_docs_percy:
    <<: *cypress_defaults
    executor: cypress
    steps:
      - checkout_and_attach_workspace
      - run_test_visual_docs_percy

  test_visual_docs_percy_2:
    <<: *cypress_defaults
    executor: cypress
    steps:
      - checkout_and_attach_workspace
      - run_test_visual_docs_percy

  test_e2e_comps:
    <<: *cypress_defaults
    executor: cypress
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Component Tests
          command: yarn e2e:comps:ci
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos
      - slack/notify:
          <<: *slack_notify

  test_e2e_docs:
    <<: *cypress_defaults
    executor: cypress
    parallelism: 10
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Run Docs Site Functional Tests
          command: |
            export TESTS=$(circleci tests glob "cypress/site/functional/**/*.cy.{js,jsx,ts,tsx}" | circleci tests split | paste -sd ',')
            echo $TESTS
            yarn e2e:docs:ci
      - store_artifacts:
          path: cypress/screenshots
      - store_artifacts:
          path: cypress/videos
      - slack/notify:
          <<: *slack_notify

  bump_version:
    executor: node
    parameters:
      version:
        type: string
    steps:
      - checkout
      - run:
          name: Set github identity
          command: make set_git_identity
      - run:
          name: Bump version
          command: make bump_version NEW_VERSION=<< parameters.version >>
      - slack/notify:
          <<: *slack_notify

  delete_trigger_release_tag:
    executor: node
    parameters:
      version:
        type: string
    steps:
      - checkout
      - run:
          name: Set github identity
          command: make set_git_identity
      - run:
          name: Delete trigger-release@ tag
          command: make delete_trigger_release_tag VERSION=<< parameters.version >>
      - slack/notify:
          <<: *slack_notify

  publish_npm:
    parameters:
      publish_dev:
        type: boolean
        default: false
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Add NPM login credentionals
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Set github identity
          command: make set_git_identity
      - when:
          condition: << parameters.publish_dev >>
          steps:
            - run:
                name: Publish components to NPM
                command: make publish_npm_dev
      - unless:
          condition: << parameters.publish_dev >>
          steps:
            - run:
                name: Publish components to NPM
                command: make publish_npm
      - slack/notify:
          <<: *slack_notify

  # Paths are passed in, so covers both subfolders for PR env and root for other envs
  push_s3_general_oidc:
    parameters:
      aws_region:
        description: AWS Region
        type: string
        default: '${AWS_DEFAULT_REGION}'
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: '${S3_AWS_ASSUME_ROLE_ARN}'
      s3Path_docs:
        type: string
      s3Path_storybook:
        type: string
    executor: aws-cli-and-terraform
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - aws-cli/setup:
          role-arn: << parameters.aws_assume_role_arn >>
          profile-name: 'NEWSKIT-OIDC-PROFILE'
          role-session-name: '${CIRCLE_WORKFLOW_ID}-s3-push'
      - run:
          name: Upload sites to given S3 paths
          command:
            | # output current date time to a HTML file to allow a in-browser that check CDN does not return old files
            export AWS_DEFAULT_REGION=<< parameters.aws_region >>
            export s3Path_docs=<< parameters.s3Path_docs >>
            export s3Path_storybook=<< parameters.s3Path_storybook >>
            echo "${SITE_ENV} $(date)" > timestamp.html
            aws s3 cp public $s3Path_docs --recursive
            aws s3 cp timestamp.html $s3Path_docs
            aws s3 cp dist-storybook $s3Path_storybook --recursive
            aws s3 cp timestamp.html $s3Path_storybook
      - slack/notify:
          <<: *slack_notify

  push_s3_pr_oidc:
    parameters:
      aws_region:
        description: AWS Region
        type: string
        default: '${AWS_DEFAULT_REGION}'
      aws_assume_role_arn:
        description: AWS ARN For Assume Role
        type: string
        default: '${S3_AWS_ASSUME_ROLE_ARN}'
    executor: aws-cli-and-terraform
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - aws-cli/setup:
          role-arn: << parameters.aws_assume_role_arn >>
          profile-name: 'NEWSKIT-OIDC-PROFILE'
          role-session-name: '${CIRCLE_WORKFLOW_ID}-s3-push'
      - node/install:
          install-yarn: false
          node-version: '16.13'
      - run:
          name: Upload PR sites to S3 subfolders
          command: |
            export AWS_DEFAULT_REGION=<< parameters.aws_region >>
            export s3Path_docs=$(node scripts/s3-pr-branch-naming.js ${CIRCLE_BRANCH} 's3://ncu-newskit-docs-pr/')
            echo "${SITE_ENV} $(date)" > timestamp.html
            aws s3 cp public $s3Path_docs --recursive
            aws s3 cp timestamp.html $s3Path_docs
            export s3Path_storybook=$(node scripts/s3-pr-branch-naming.js ${CIRCLE_BRANCH} 's3://ncu-newskit-docs-pr/' 'storybook/')
            echo $s3Path_storybook
            aws s3 cp dist-storybook $s3Path_storybook --recursive
            aws s3 cp timestamp.html $s3Path_storybook
      - slack/notify:
          <<: *slack_notify

  post_pr_env_url_to_github_pr:
    executor: node
    steps:
      - checkout
      - github-cli/setup
      - run:
          name: Doc site link
          command: |
            if gh pr view -c | grep "Documentation Site" ;
            then
              circleci-agent step halt
            else
              gh pr comment --body "You can preview these changes on:
              Documentation Site: $(node scripts/pr_comment_link.js ${CIRCLE_BRANCH} 'http://ncu-newskit-docs-pr.s3-website-eu-west-1.amazonaws.com/' 'docs')
              Storybook: $(node scripts/pr_comment_link.js ${CIRCLE_BRANCH} 'http://ncu-newskit-docs-pr.s3-website-eu-west-1.amazonaws.com/' 'storybook')"
            fi
      - slack/notify:
          <<: *slack_notify

  validate_terraform:
    executor: node
    steps:
      - run:
          name: Terraform is valid
          command: |
            echo "If you see this message, it means all the Terraform is valid"

  test_newskit_in_nextjs_app:
    executor: cypress
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Install yalc and create-next-app
          command: |
            yarn global add yalc
      - run:
          name: Yalc publish and run create-nextjs-app
          command: |
            cd dist
            yalc publish
            cd ..
            yarn create next-app newskit-integration-test
      - run:
          name: Prepare the NextJs app
          command: |
            echo "Adding needed files into the NextJs app"

            cp ./scripts/templates-integration-test/index.txt ./newskit-integration-test/pages/index.js
            cp ./scripts/templates-integration-test/cypress.config.js ./newskit-integration-test/
            cp ./scripts/templates-integration-test/next.config.js ./newskit-integration-test/
            cp -R ./scripts/templates-integration-test/cypress ./newskit-integration-test

            echo "Installing needed packages into the NextJS app"

            cd newskit-integration-test
            yalc add newskit
            yarn add start-server-and-test
            yarn add react@18.2
            yarn add react-dom@18.2
            yarn add @emotion/react
            yarn add @emotion/styled
            yarn add -D cypress@12.3.0
      - run:
          name: Serve and test app with Cypress
          command: |
            cd newskit-integration-test
            yarn build
            yarn start-test start 3000 'yarn cypress run'
      - slack/notify:
          <<: *slack_notify

  # ========== CODEMOD RELATED JOBS    ==========

  install_deps_codemod:
    executor: node
    steps:
      - checkout
      - restore_cache:
          keys:
            - yarn-build-v1-codemod-{{ checksum "lib/codemod/yarn.lock" }}
            - yarn-build-v1-codemod-
      - run:
          name: Codemode Dependencies Install
          command: cd lib/codemod && make install
      - save_cache:
          key: yarn-build-v1-codemod-{{ checksum "lib/codemod/yarn.lock" }}
          paths:
            - ~/.cache
      - persist_to_workspace:
          root: ./
          paths:
            - lib/codemod/node_modules/*
      - slack/notify:
          <<: *slack_notify

  lint_codemod:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Lint Codemod
          command: cd lib/codemod && make lint
      - slack/notify:
          <<: *slack_notify

  test_unit_codemod:
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Unit Testing Codemod
          command: cd lib/codemod && make unit_test
          environment:
            JEST_JUNIT_OUTPUT_DIR: ./reports/codemod-junit/
      - store_test_results:
          path: ./reports/codemod-junit/
      - store_artifacts:
          path: ./reports/codemod-junit
      - slack/notify:
          <<: *slack_notify

  publish_npm_codemod:
    parameters:
      publish_dev:
        type: boolean
        default: false
    executor: node
    steps:
      - checkout
      - attach_workspace:
          at: ~/project
      - run:
          name: Add NPM login credentionals
          command: echo "//registry.npmjs.org/:_authToken=${NPM_TOKEN}" > ~/.npmrc
      - run:
          name: Set github identity
          command: cd lib/codemod && make set_git_identity
      - when:
          condition: << parameters.publish_dev >>
          steps:
            - run:
                name: Publish codemod to NPM
                command: cd lib/codemod && make publish_npm_dev
      - unless:
          condition: << parameters.publish_dev >>
          steps:
            - run:
                name: Publish codemod to NPM
                command: cd lib/codemod && make publish_npm;
      - slack/notify:
          <<: *slack_notify

  bump_version_codemod:
    executor: node
    parameters:
      version:
        type: string
    steps:
      - checkout
      - run:
          name: Set github identity
          command: cd lib/codemod && make set_git_identity
      - run:
          name: Bump version
          command: cd lib/codemod && make bump_version NEW_VERSION=<< parameters.version >>
      - slack/notify:
          <<: *slack_notify

  delete_trigger_release_tag_codemod:
    executor: node
    parameters:
      version:
        type: string
    steps:
      - checkout
      - run:
          name: Set github identity
          command: cd lib/codemod && make set_git_identity
      - run:
          name: Delete trigger-release-codemod@ tag
          command: cd lib/codemod && make delete_trigger_release_tag VERSION=<< parameters.version >>
      - slack/notify:
          <<: *slack_notify

  merge_checker:
    executor: node
    steps:
      - run: echo "Merge checker"

# ========== FILTERS START    ==========

only_on_trigger_release_tag: &only_on_trigger_release_tag
  filters:
    tags:
      # The pattern must match the tag created in the github release interface. E.g: "trigger-release@5.0.1"
      only: /^trigger-release@([0-9])(\.([0-9])){2}$/
    branches:
      ignore: /.*/

only_on_version_tag: &only_on_version_tag
  filters:
    tags:
      # The pattern must match the tag created and pushed by bump_version make script. E.g: "v5.0.1"
      only: /^v([0-9])(\.([0-9])){2}$/
    branches:
      ignore: /.*/

only_on_trigger_release_tag_codemod: &only_on_trigger_release_tag_codemod
  filters:
    tags:
      # The pattern must match the tag created in the github release interface. E.g: "trigger-release-codemod@5.0.1"
      only: /^trigger-release-codemod@([0-9])(\.([0-9])){2}$/
    branches:
      ignore: /.*/

only_on_version_tag_codemod: &only_on_version_tag_codemod
  filters:
    tags:
      # The pattern must match the tag created and pushed by bump_version_codemod make script. E.g: "codemod-v5.0.1"
      only: /^codemod-v([0-9])(\.([0-9])){2}$/
    branches:
      ignore: /.*/

# ========== FILTERS END        ==========

workflows:
  pull_request:
    when:
      matches:
        # Supporting Pr branches starting with feat/, docs/, fix/, chore/, style/, refactor/, perf/, test/, etc.
        pattern: '^build\/.*|chore\/.*|ci\/.*|docs\/.*|feat\/.*|fix\/.*|improvement\/.*|perf\/.*|refactor\/.*|revert.*\/.*|style\/.*|test\/.*|^dependabot\/.*|^snyk-upgrade.*'
        value: << pipeline.git.branch >>
    jobs:
      - install_deps
      - install_cypress
      - build_icons:
          requires:
            - install_deps
      - build_components:
          requires:
            - build_icons
      - build_storybook:
          requires:
            - build_icons
      - build_test_e2e:
          requires:
            - build_icons
      - lint:
          requires:
            - build_icons
      - test_unit_comps:
          requires:
            - build_icons
      - test_unit_docs:
          requires:
            - build_icons
      - test_newskit_in_nextjs_app:
          requires:
            - build_components
      - test_e2e_comps:
          context: ncu-product-platforms-context
          requires:
            - build_test_e2e
            - install_cypress
      - build_docs_pr_with_no_base_url:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_broken_links_docs:
          name: test_broken_links_docs_pr
          context: ncu-product-platforms-context
          requires:
            - build_docs_pr_with_no_base_url
      - test_e2e_docs:
          name: test_e2e_docs_pr
          context: ncu-product-platforms-context
          requires:
            - build_docs_pr_with_no_base_url
            - install_cypress
            - build_storybook
      - no_visual_changes:
          type: approval
          requires:
            - build_storybook
            - install_cypress
      - docs_and_comps_visual_changes:
          type: approval
          requires:
            - build_storybook
            - install_cypress
      - docs_visual_changes:
          type: approval
          requires:
            - build_storybook
            - install_cypress

      # Jobs for realising unstable NPM version
      - approve_publish_npm_pr:
          type: approval
          requires:
            - test_newskit_in_nextjs_app
            - lint
            - test_unit_comps
            - test_unit_docs
            - test_e2e_comps
            - test_e2e_docs_pr
      - publish_npm:
          name: publish_npm_pr
          context: ncu-product-platforms-context
          publish_dev: true
          requires:
            - approve_publish_npm_pr
      # End jobs for releasing unstable NPM version

      - skip_percy_comps_check:
          context: ncu-product-platforms-context
          requires:
            - no_visual_changes
      - skip_percy_docsite_check:
          context: ncu-product-platforms-context
          requires:
            - no_visual_changes
      - test_visual_comps_percy:
          context: ncu-product-platforms-context
          requires:
            - docs_and_comps_visual_changes
      - test_visual_docs_percy:
          context: ncu-product-platforms-context
          requires:
            - build_docs_pr_with_no_base_url
            - install_cypress
            - test_visual_comps_percy
      - test_visual_docs_percy_2:
          context: ncu-product-platforms-context
          requires:
            - build_docs_pr_with_no_base_url
            - install_cypress
            - docs_visual_changes
      - skip_percy_comps_check_2:
          context: ncu-product-platforms-context
          requires:
            - docs_visual_changes
      - can_i_merge_checker:
          context: ncu-product-platforms-context
          requires:
            - test_newskit_in_nextjs_app
            - lint
            - test_unit_comps
            - test_unit_docs
            - test_e2e_comps
            - test_e2e_docs_pr
            - test_broken_links_docs_pr
      - init_aws:
          context: ncu-product-platforms-context
      - deploy_terraform_oidc:
          name: deploy_terraform_s3_pr
          package: s3/dev-newskit
          context: ncu-newskit-site-pr
          apply: true
          tf_env: false
          environment: pr
          requires:
            - init_aws
      - deploy_terraform_oidc:
          name: validate_deploy_terraform_s3_dev
          package: s3/dev-newskit
          context: ncu-newskit-site-dev
          apply: false # Can set true while doing testing of CircleCI code
          tf_env: true
          environment: dev
          requires:
            - init_aws
      - deploy_terraform_oidc:
          name: validate_deploy_terraform_s3_staging
          package: s3/prod-newskit
          context: ncu-newskit-site-stage
          apply: false # Can set true while doing testing of CircleCI code
          tf_env: true
          environment: staging
          requires:
            - init_aws
      - deploy_terraform_oidc:
          name: validate_deploy_terraform_s3_prod
          package: s3/prod-newskit
          context: ncu-newskit-site-stage
          apply: false # Can set true while doing testing of CircleCI code
          tf_env: true
          environment: prod
          requires:
            - init_aws
      - build_docs:
          name: build_docs_pr
          context: ncu-newskit-site-pr
          requires:
            - build_icons
      - push_s3_pr_oidc:
          name: deploy_to_s3_pr
          context: ncu-newskit-site-pr
          requires:
            - deploy_terraform_s3_pr
            - build_docs_pr
            - build_storybook
      - post_pr_env_url_to_github_pr:
          name: pr_enviroment_link
          context: ncu-product-platforms-context
          requires:
            - deploy_to_s3_pr
      - validate_terraform:
          name: validate_terraform
          requires:
            - deploy_terraform_s3_pr
            - validate_deploy_terraform_s3_dev
            - validate_deploy_terraform_s3_staging
            - validate_deploy_terraform_s3_prod
      # Temporarily uncomment these steps if needing to test S3 deployments on push rather than on merge
      #- build_docs_with_no_base_url:
      #    name: build_docs_dev
      #    context: ncu-newskit-site-dev
      #    requires:
      #      - build_icons
      #      - deploy_to_s3_pr
      #- push_s3_general_oidc:
      #    name: deploy_to_s3_dev
      #    context: ncu-newskit-site-dev
      #    s3Path_docs: s3://ncu-newskit-docs-dev/
      #    s3Path_storybook: s3://ncu-newskit-docs-dev/storybook/
      #    requires:
      #      - validate_terraform
      #      - build_docs_dev
      #      - build_storybook

  pull_request_codemod:
    when:
      matches:
        # Supporting Pr branches starting with feat/, docs/, fix/, chore/, style/, refactor/, perf/, test/, etc.
        pattern: '^build\/.*|chore\/.*|ci\/.*|docs\/.*|feat\/.*|fix\/.*|improvement\/.*|perf\/.*|refactor\/.*|revert.*\/.*|style\/.*|test\/.*|^dependabot\/.*|^snyk-upgrade.*'
        value: << pipeline.git.branch >>
    jobs:
      - install_deps_codemod:
          context: ncu-product-platforms-context

      - test_unit_codemod:
          context: ncu-product-platforms-context
          requires:
            - install_deps_codemod

      - lint_codemod:
          context: ncu-product-platforms-context
          requires:
            - install_deps_codemod

      - approve_publish_npm_pr_codemod:
          context: ncu-product-platforms-context
          type: approval
          requires:
            - test_unit_codemod
            - lint_codemod

      - merge_checker:
          context: ncu-product-platforms-context
          requires:
            - test_unit_codemod
            - lint_codemod

      - publish_npm_codemod:
          name: publish_npm_pr_codemod
          context: ncu-product-platforms-context
          publish_dev: true
          requires:
            - approve_publish_npm_pr_codemod

  main:
    when:
      equal: [main, << pipeline.git.branch >>]
    jobs:
      - init_aws:
          context: ncu-product-platforms-context
      - deploy_terraform_oidc:
          name: deploy_terraform_s3_dev
          package: s3/dev-newskit
          context: ncu-newskit-site-dev
          apply: true
          tf_env: true
          environment: dev
          requires:
            - init_aws
      - deploy_terraform_oidc:
          name: deploy_terraform_s3_staging
          package: s3/prod-newskit
          context: ncu-newskit-site-stage
          apply: true
          tf_env: true
          environment: staging
          requires:
            - init_aws
      - deploy_terraform_oidc:
          name: deploy_terraform_s3_prod
          package: s3/prod-newskit
          context: ncu-newskit-site-prod
          apply: true
          tf_env: true
          environment: prod
          requires:
            - init_aws
      - install_deps:
          context: ncu-product-platforms-context
      - install_cypress:
          context: ncu-product-platforms-context
      - build_icons:
          context: ncu-product-platforms-context
          requires:
            - install_deps
      - build_components:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - build_storybook:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - build_test_e2e:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - lint:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_unit_comps:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_unit_docs:
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_e2e_comps:
          context: ncu-product-platforms-context
          requires:
            - build_test_e2e
            - install_cypress
      - build_docs_with_no_base_url:
          name: build_docs_dev
          context: ncu-newskit-site-dev
          requires:
            - build_icons
      - test_broken_links_docs:
          name: test_broken_links_docs_dev
          context: ncu-product-platforms-context
          requires:
            - build_docs_dev
      - test_e2e_docs:
          name: test_e2e_docs_dev
          context: ncu-newskit-site-dev
          requires:
            - build_docs_dev
            - install_cypress
            - build_storybook
      - test_newskit_in_nextjs_app:
          context: ncu-product-platforms-context
          requires:
            - build_components

      # Jobs for updating Percy baselines after PRs are merged
      - comps_tests_conditional_run_to_update_baselines:
          context: ncu-product-platforms-context
          requires:
            - build_storybook
      - docsite_tests_conditional_run_to_update_baselines:
          context: ncu-product-platforms-context
          requires:
            - build_docs_dev
            - install_cypress

      # Jobs for deploying unstable NewsKit version
      - approve_publish_npm_dev:
          type: approval
          requires:
            - test_newskit_in_nextjs_app
            - lint
            - test_unit_comps
            - test_unit_docs
            - test_e2e_comps
            - test_e2e_docs_dev
      - publish_npm:
          name: publish_npm_dev
          context: ncu-product-platforms-context
          publish_dev: true
          requires:
            - approve_publish_npm_dev
        # end

      - push_s3_general_oidc:
          name: deploy_to_s3_dev
          context: ncu-newskit-site-dev
          s3Path_docs: s3://ncu-newskit-docs-dev/
          s3Path_storybook: s3://ncu-newskit-docs-dev/storybook/
          requires:
            - deploy_terraform_s3_dev
            - build_docs_dev
            - build_storybook
            - lint
            - test_unit_comps
            - test_unit_docs
            - test_e2e_comps
            - test_e2e_docs_dev

      - push_s3_general_oidc:
          name: deploy_to_s3_staging
          context: ncu-newskit-site-stage
          s3Path_docs: s3://ncu-newskit-docs-staging/
          s3Path_storybook: s3://ncu-newskit-docs-staging/storybook/
          requires:
            - deploy_terraform_s3_staging
            - build_docs_dev # removed build_docs_staging from this workflow to save 5 mins (docs site behaviour unaffected)
            - build_storybook

      - build_docs_with_no_base_url:
          name: build_docs_prod
          context: ncu-newskit-site-prod
          requires:
            - deploy_to_s3_staging
      - push_s3_general_oidc:
          name: deploy_to_s3_prod
          context: ncu-newskit-site-stage
          s3Path_docs: s3://ncu-newskit-docs-prod/
          s3Path_storybook: s3://ncu-newskit-docs-prod/storybook/
          requires:
            - deploy_terraform_s3_prod
            - build_docs_prod
            - build_storybook
      # end

  main_codemod:
    when:
      equal: [main, << pipeline.git.branch >>]
    jobs:
      - install_deps_codemod:
          context: ncu-product-platforms-context

      - test_unit_codemod:
          context: ncu-product-platforms-context
          requires:
            - install_deps_codemod

      - lint_codemod:
          context: ncu-product-platforms-context
          requires:
            - install_deps_codemod

      - approve_publish_npm_pr_codemod:
          context: ncu-product-platforms-context
          type: approval
          requires:
            - test_unit_codemod
            - lint_codemod

      - publish_npm_codemod:
          name: publish_npm_pr_codemod
          context: ncu-product-platforms-context
          publish_dev: true
          requires:
            - approve_publish_npm_pr_codemod

  on_trigger_release_tag:
    jobs:
      - bump_version:
          <<: *only_on_trigger_release_tag
          context: ncu-product-platforms-context
          version: $(echo << pipeline.git.tag >> | cut -f2 -d "@")

  on_trigger_release_tag_codemod:
    jobs:
      - bump_version_codemod:
          <<: *only_on_trigger_release_tag_codemod
          context: ncu-product-platforms-context
          version: $(echo << pipeline.git.tag >> | cut -f2 -d "@")

  on_release_version_tag:
    # Workflow's jobs triggered by the bump_version make script, which creates and pushes a new version tag e.g: "v5.0.1".
    jobs:
      - delete_trigger_release_tag:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          version: $(echo << pipeline.git.tag >> | cut -f2 -d "v")

      - init_aws:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
      - deploy_terraform_oidc:
          name: deploy_terraform_s3_staging
          package: s3/prod-newskit
          context: ncu-newskit-site-stage
          apply: true
          tf_env: true
          environment: staging
          requires:
            - init_aws
      - deploy_terraform_oidc:
          name: deploy_terraform_s3_prod
          package: s3/prod-newskit
          context: ncu-newskit-site-prod
          apply: true
          tf_env: true
          environment: prod
          requires:
            - init_aws
      - install_deps:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
      - install_cypress:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
      - build_icons:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - install_deps
      - build_components:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - build_storybook:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - build_test_e2e:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - lint:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_unit_comps:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_unit_docs:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_icons
      - test_e2e_comps:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_test_e2e
            - install_cypress
      - build_docs_with_no_base_url:
          <<: *only_on_version_tag
          name: build_docs_versioned
          context: ncu-newskit-site-prod
          requires:
            - build_icons
            - delete_trigger_release_tag
      - test_broken_links_docs:
          <<: *only_on_version_tag
          name: test_broken_links_docs_prod
          context: ncu-product-platforms-context
          requires:
            - build_docs_versioned
      - test_e2e_docs:
          <<: *only_on_version_tag
          name: test_e2e_docs_prod
          context: ncu-newskit-site-prod
          requires:
            - build_docs_versioned
            - install_cypress
            - build_storybook
      - test_newskit_in_nextjs_app:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - build_components

      - publish_npm:
          <<: *only_on_version_tag
          context: ncu-product-platforms-context
          requires:
            - lint
            - test_unit_comps
            - test_unit_docs
            - test_e2e_comps
            - test_e2e_docs_prod
            - test_newskit_in_nextjs_app

      # Deploying newskit.co.uk and storybook to Staging then to Prod environment.
      - build_docs_with_no_base_url:
          name: build_docs_staging
          context: ncu-newskit-site-stage
          requires:
            - build_icons
            - publish_npm
      - push_s3_general_oidc:
          name: deploy_to_s3_staging
          context: ncu-newskit-site-stage
          s3Path_docs: s3://ncu-newskit-docs-staging/
          s3Path_storybook: s3://ncu-newskit-docs-staging/storybook/
          requires:
            - deploy_terraform_s3_staging
            - build_docs_staging
            - build_storybook

      - build_docs_with_no_base_url:
          name: build_docs_prod
          context: ncu-newskit-site-prod
          requires:
            - build_icons
            - deploy_to_s3_staging
      - push_s3_general_oidc:
          name: deploy_to_s3_prod
          context: ncu-newskit-site-prod
          s3Path_docs: s3://ncu-newskit-docs-prod/
          s3Path_storybook: s3://ncu-newskit-docs-prod/storybook/
          requires:
            - deploy_terraform_s3_prod
            - build_docs_prod
            - build_storybook

  on_release_version_tag_codemod:
    # Workflow's jobs triggered by the bump_version_codemod make script, which creates and pushes a new version tag e.g: "codemod-v5.0.1".
    jobs:
      - delete_trigger_release_tag_codemod:
          <<: *only_on_version_tag_codemod
          context: ncu-product-platforms-context
          version: $(echo << pipeline.git.tag >> | cut -f2 -d "v")

      - install_deps_codemod:
          <<: *only_on_version_tag_codemod
          context: ncu-product-platforms-context

      - test_unit_codemod:
          <<: *only_on_version_tag_codemod
          context: ncu-product-platforms-context
          requires:
            - install_deps_codemod

      - lint_codemod:
          <<: *only_on_version_tag_codemod
          context: ncu-product-platforms-context
          requires:
            - install_deps_codemod

      - publish_npm_codemod:
          <<: *only_on_version_tag_codemod
          context: ncu-product-platforms-context
          publish_dev: false
          requires:
            - test_unit_codemod
            - lint_codemod
