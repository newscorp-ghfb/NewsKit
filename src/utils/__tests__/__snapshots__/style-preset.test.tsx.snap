// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`getStylePresetFromTheme renders with active state when prop isActive is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #CCCCCC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked state when prop isChecked is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #3358CC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #2B4AAB;
  border-color: #2B4AAB;
}

.emotion-0:focus:not(:disabled) {
  background-color: #2B4AAB;
  border-color: #2B4AAB;
}

.emotion-0:invalid:not(:disabled) {
  background-color: #D20600;
  border-color: #D20600;
}

.emotion-0:valid:not(:disabled) {
  background-color: #148F39;
  border-color: #148F39;
}

.emotion-0:disabled {
  background-color: #F4F4F4;
  border-color: #F4F4F4;
}

.emotion-0:disabled svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:disabled pseudo state when both isChecked and isDisabled are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #F4F4F4;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:focus pseudo state when both isChecked and isFocused are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #2B4AAB;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #2B4AAB;
  border-color: #2B4AAB;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:invalid pseudo state when both isChecked and isInvalid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #A60100;
  border-color: #A60100;
}

.emotion-0:focus:not(:disabled) {
  background-color: #A60100;
  border-color: #A60100;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:invalid:focus state when isChecked, isFocused and isInvalid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #A60100;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #A60100;
  border-color: #A60100;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:invalid:hover pseudo state when both isChecked and isInvalid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #D20600;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
  border-color: #A60100;
}

.emotion-0:focus:not(:disabled) {
  background-color: #A60100;
  border-color: #A60100;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:valid pseudo state when both isChecked and isValid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #0A782A;
  border-color: #0A782A;
}

.emotion-0:focus:not(:disabled) {
  background-color: #0A782A;
  border-color: #0A782A;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:valid:focus state when isChecked, isFocused and isValid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #0A782A;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #0A782A;
  border-color: #0A782A;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with checked:valid:hover pseudo state when both isChecked and isValid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #148F39;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
  border-color: #0A782A;
}

.emotion-0:focus:not(:disabled) {
  background-color: #0A782A;
  border-color: #0A782A;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with disabled state when prop isDisabled is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #F4F4F4;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with focus state when prop isFocused is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #2B4AAB;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #2B4AAB;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with hover state when prop isHovered is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #3358CC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with invalid state when prop isInvalid is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #A60100;
}

.emotion-0:focus:not(:disabled) {
  border-color: #A60100;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with loading state when prop isLoading is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #CCCCCC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected state when prop isSelected is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #CCCCCC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:disabled pseudo state when both isSelected and isDisabled are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #F4F4F4;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:focus pseudo state when both isSelected and isFocused are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #2B4AAB;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:invalid pseudo state when both isSelected and isInvalid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:invalid:focus state when isSelected, isFocused and isInvalid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #2B4AAB;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:invalid:hover pseudo state when both isSelected and isInvalid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:valid pseudo state when both isSelected and isValid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:valid:focus state when isSelected, isFocused and isValid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #2B4AAB;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with selected:valid:hover pseudo state when both isSelected and isValid are passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme renders with valid state when prop isValid is passed 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF0000;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #0A782A;
}

.emotion-0:focus:not(:disabled) {
  border-color: #0A782A;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with checked:focus pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #3358CC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #2B4AAB;
  border-color: #2B4AAB;
}

.emotion-0:focus:not(:disabled) {
  background-color: #FF0000;
  border-color: #2B4AAB;
}

.emotion-0:invalid:not(:disabled) {
  background-color: #D20600;
  border-color: #D20600;
}

.emotion-0:valid:not(:disabled) {
  background-color: #148F39;
  border-color: #148F39;
}

.emotion-0:disabled {
  background-color: #F4F4F4;
  border-color: #F4F4F4;
}

.emotion-0:disabled svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with checked:hover pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #3358CC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
  border-color: #2B4AAB;
}

.emotion-0:focus:not(:disabled) {
  background-color: #2B4AAB;
  border-color: #2B4AAB;
}

.emotion-0:invalid:not(:disabled) {
  background-color: #D20600;
  border-color: #D20600;
}

.emotion-0:valid:not(:disabled) {
  background-color: #148F39;
  border-color: #148F39;
}

.emotion-0:disabled {
  background-color: #F4F4F4;
  border-color: #F4F4F4;
}

.emotion-0:disabled svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with default iconButtonMinimalPrimary style preset 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-radius: 50%;
  color: #3358CC;
}

.emotion-0 svg {
  fill: #3358CC;
}

.emotion-0:hover:not(:disabled) {
  background-color: #E0E7FF;
}

.emotion-0:active:not(:disabled) {
  background-color: #AEBFFF;
}

.emotion-0:disabled {
  background-color: transparent;
  color: #C0C0C0;
}

.emotion-0:disabled svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with disabled and loading state 1`] = `
<DocumentFragment>
  .emotion-0 {
  color: #C0C0C0;
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, and incorrect for md breakpoints 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }

  .emotion-0:disabled {
    color: red;
  }
}

@media screen and (min-width: 480px) {
  .emotion-0 {
    background-color: blue;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, and interactivePrimary030 for md breakpoints 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }

  .emotion-0:disabled {
    color: red;
  }
}

@media screen and (min-width: 480px) and (max-width: 767px) {
  .emotion-0 {
    background-color: blue;
  }
}

@media screen and (min-width: 768px) {
  .emotion-0 {
    background-color: green;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, interactivePrimary030 for md, and interactivePrimary040 for lg breakpoints 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }
}

@media screen and (min-width: 480px) and (max-width: 767px) {
  .emotion-0 {
    background-color: blue;
  }
}

@media screen and (min-width: 768px) and (max-width: 1023px) {
  .emotion-0 {
    background-color: green;
  }
}

@media screen and (min-width: 1024px) {
  .emotion-0 {
    background-color: #FF00FF;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with interactivePrimary010 for xs, interactivePrimary020 for sm, interactivePrimary030 for md, interactivePrimary040 for lg breakpoints and ignore wrong prop 1`] = `
<DocumentFragment>
  @media screen and (max-width: 479px) {
  .emotion-0 {
    background-color: red;
  }
}

@media screen and (min-width: 480px) and (max-width: 767px) {
  .emotion-0 {
    background-color: blue;
  }
}

@media screen and (min-width: 768px) and (max-width: 1023px) {
  .emotion-0 {
    background-color: green;
  }
}

@media screen and (min-width: 1024px) {
  .emotion-0 {
    background-color: #FF00FF;
  }
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with invalid:focus pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #A60100;
}

.emotion-0:focus:not(:disabled) {
  border-color: #A60100;
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with invalid:hover pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #D20600;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #A60100;
  background-color: #FF0000;
}

.emotion-0:focus:not(:disabled) {
  border-color: #A60100;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with isSvg  1`] = `
<DocumentFragment>
  .emotion-0 {
  fill: #00ff00;
}

.emotion-0:hover:not(:disabled) {
  fill: #FF0000;
}

.emotion-0:active:not(:disabled) {
  background-color: #AEBFFF;
}

.emotion-0:disabled {
  background-color: transparent;
  color: #C0C0C0;
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with loading and selected state 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #ffff00;
  border-radius: 50%;
  color: #3358CC;
}

.emotion-0 svg {
  fill: #3358CC;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with nestedCssSelector adds the nested element class to all state selectors 1`] = `
<DocumentFragment>
  .emotion-0 .nested-element-class {
  background-color: transparent;
  border-radius: 50%;
  color: #3358CC;
}

.emotion-0 .nested-element-class svg {
  fill: #3358CC;
}

.emotion-0:hover:not(:disabled) .nested-element-class {
  background-color: #E0E7FF;
}

.emotion-0:active:not(:disabled) .nested-element-class {
  background-color: #AEBFFF;
}

.emotion-0:disabled .nested-element-class {
  background-color: transparent;
  color: #C0C0C0;
}

.emotion-0:disabled .nested-element-class svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with no existing style preset key returns empty fragment 1`] = `
<DocumentFragment>
  <div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with no existing style preset state returns empty fragment 1`] = `
<DocumentFragment>
  <div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with override to interactivePrimary040 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FF00FF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with selected:focus pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #CCCCCC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:focus:not(:disabled) {
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with selected:hover pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #CCCCCC;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with stateOverwrites without base state fallbacks to empty object for base and returns empty fragment 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #FFFF00;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with valid:focus pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #0A782A;
}

.emotion-0:focus:not(:disabled) {
  border-color: #0A782A;
  background-color: #FF0000;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with valid:hover pseudoState 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: #00FF00;
  border-color: #148F39;
  border-width: 1px;
  border-radius: 4px;
  border-style: solid;
}

.emotion-0 svg {
  fill: #FFFFFF;
}

.emotion-0:hover:not(:disabled) {
  border-color: #0A782A;
  background-color: #FF0000;
}

.emotion-0:focus:not(:disabled) {
  border-color: #0A782A;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme with visited, visited:focus & visited:hover state 1`] = `
<DocumentFragment>
  .emotion-0 {
  color: #3358CC;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.emotion-0 svg {
  fill: #3358CC;
}

.emotion-0:hover:not(:disabled) {
  color: #2B4AAB;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.emotion-0:hover:not(:disabled) svg {
  fill: #2B4AAB;
}

.emotion-0:active:not(:disabled) {
  color: #213A82;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.emotion-0:active:not(:disabled) svg {
  fill: #213A82;
}

.emotion-0:visited:not(:disabled) {
  color: #00ff00;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.emotion-0:visited:not(:disabled) svg {
  fill: #5E44E4;
}

.emotion-0:visited:hover:not(:disabled) {
  color: #FF0000;
  -webkit-text-decoration: underline;
  text-decoration: underline;
}

.emotion-0:visited:hover:not(:disabled) svg {
  fill: #5E44E4;
}

.emotion-0:visited:focus:not(:disabled) {
  color: #0000FF;
}

<link
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme without background-color styles 1`] = `
<DocumentFragment>
  .emotion-0 {
  border-radius: 50%;
  color: #3358CC;
}

.emotion-0 svg {
  fill: #3358CC;
}

.emotion-0:disabled {
  color: #C0C0C0;
}

.emotion-0:disabled svg {
  fill: #C0C0C0;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;

exports[`getStylePresetFromTheme without disabled state styles 1`] = `
<DocumentFragment>
  .emotion-0 {
  background-color: transparent;
  border-radius: 50%;
  color: #3358CC;
}

.emotion-0 svg {
  fill: #3358CC;
}

.emotion-0:hover:not(:disabled) {
  background-color: #E0E7FF;
}

.emotion-0:active:not(:disabled) {
  background-color: #AEBFFF;
}

<div
    class="emotion-0"
  />
</DocumentFragment>
`;
