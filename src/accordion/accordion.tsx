import React from 'react';
import {withOwnTheme} from '../utils/with-own-theme';
import {
  StyledAccodionContainer,
  StyledHeaderWrapper,
  StyledAccordionButton,
  StyledPanel,
  StyledEnhancer,
  StyledIndicatorIcon,
  StyledIndicatorLabel,
  StyledHeader,
  StyledDividerWrapper,
} from './styled';
import {AccordionProps} from './types';
import defaults from './defaults';
import stylePresets from './style-presets';
import {useReactKeys} from '../utils/hooks';
import {Divider} from '../divider';

const ThemelessAccordion = React.forwardRef<HTMLDivElement, AccordionProps>(
  (
    {
      headingAs = 'h3',
      header,
      label,
      startEnhancer,
      indicatorIcon,
      expanded,
      applyDivider = true,
      disabled = false,
      children,
      ariaControls,
      id,
      overrides,
      ...props
    },
    ref,
  ) => {
    const [autoGeneratedID1, autoGeneratedID2] = useReactKeys(2);
    const ariaControlsId = ariaControls || autoGeneratedID1;
    const ariaLabelledById = id || autoGeneratedID2;

    return (
      <StyledAccodionContainer ref={ref} {...props}>
        {header && (
          <StyledHeaderWrapper as={headingAs}>
            <StyledAccordionButton
              overrides={overrides}
              disabled={disabled}
              id={ariaLabelledById}
              aria-expanded={expanded}
              aria-controls={ariaControlsId}
            >
              {startEnhancer && (
                <StyledEnhancer overrides={overrides}>
                  {startEnhancer}
                </StyledEnhancer>
              )}
              {header && <StyledHeader>{header}</StyledHeader>}
              {label && (
                <StyledIndicatorLabel overrides={overrides}>
                  {label}
                </StyledIndicatorLabel>
              )}
              {indicatorIcon && (
                <StyledIndicatorIcon overrides={overrides}>
                  {indicatorIcon}
                </StyledIndicatorIcon>
              )}
            </StyledAccordionButton>
          </StyledHeaderWrapper>
        )}
        {expanded && (
          <>
            {applyDivider && (
              <StyledDividerWrapper overrides={overrides}>
                <Divider overrides={overrides?.divider} />
              </StyledDividerWrapper>
            )}
            <StyledPanel
              aria-labelledby={ariaLabelledById}
              id={ariaControlsId}
              role="region"
              overrides={overrides}
            >
              {children}
            </StyledPanel>
          </>
        )}
      </StyledAccodionContainer>
    );
  },
);

export const Accordion = withOwnTheme(ThemelessAccordion)({
  defaults,
  stylePresets,
});
