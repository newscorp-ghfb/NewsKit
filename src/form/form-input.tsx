import React, {useContext, useEffect, useState} from 'react';
import composeRefs from '@seznam/compose-react-refs';
import {Label, LabelProps} from '../label';
import {TextField} from '../text-field/text-field';
import {AssistiveText, AssistiveTextProps} from '../assistive-text';
import {getStatusIcon} from './utils';
import {composeEventHandlers} from '../utils/compose-event-handlers';
import {Checkbox, CheckboxProps} from '../checkbox';
import {useReactKeys} from '../utils/hooks';
import {getToken} from '../utils/get-token';
import {useTheme} from '../theme';
import {
  FormInputTextFieldProps,
  FormEntryProps,
  TextFieldSize,
} from '../text-field/types';
import {FormEntry} from './form-entry';
import {Block} from '../block';
import {FormInputState} from './types';
import {SelectProps, Select} from '../select';
import {FormInputContext} from './context';
import {withOwnTheme} from '../utils/with-own-theme';
import textFieldDefaults from '../text-field/defaults';
import assistiveTextDefaults from '../assistive-text/defaults';
import {RadioButton} from '../radio-button';

const useFormFieldContext = () => useContext(FormInputContext);

export type FormInputProps = {
  state?: FormInputState;
  size?: TextFieldSize;
  children?: JSX.Element | JSX.Element[];
  id?: string;
} & Omit<FormEntryProps, 'children'>;

const ThemelessFormInput = ({
  name,
  rules,
  state: stateProp,
  size,
  children,
  id,
}: FormInputProps) => {
  const defaultSize = 'medium' as TextFieldSize;
  const [autoGeneratedId] = useReactKeys(1);

  const currentID = id || autoGeneratedId;
  const [assistiveTextId, setAssistiveTextId] = useState<string | undefined>();

  const theme = useTheme();

  const validationIconSize = getToken(
    {theme, overrides: {}},
    `textField.${size || defaultSize}.endEnhancer`,
    'endEnhancer',
    'iconSize',
  );

  const passedInputFieldContext = useFormFieldContext();

  return (
    <FormEntry name={name} rules={rules}>
      {({ref, state: stateContext, onChange, onBlur, error}) => {
        const state = stateProp || stateContext;
        const labelId = `${currentID}-label`;

        const statusIcon = getStatusIcon({state, iconSize: validationIconSize});

        const isRequired = rules && rules.required !== undefined;

        const inputFieldContext = {
          name,
          size: size || passedInputFieldContext.size || defaultSize,
          onChange,
          onBlur,
          state,
          error,
          ref,
          id: currentID,
          assistiveTextId,
          setAssistiveTextId,
          labelId,
          statusIcon,
          isRequired,
        };

        return (
          <FormInputContext.Provider value={inputFieldContext}>
            {children}
          </FormInputContext.Provider>
        );
      }}
    </FormEntry>
  );
};

export const FormInput = withOwnTheme(ThemelessFormInput)({
  defaults: {
    ...textFieldDefaults,
    ...assistiveTextDefaults,
  },
});

export const FormInputTextField = React.forwardRef<
  HTMLInputElement,
  FormInputTextFieldProps
>(({children, onChange, onBlur, endEnhancer, ...props}, inputRef) => {
  const {
    size,
    name,
    state,
    onChange: onChangeContext,
    onBlur: onBlurContext,
    ref,
    id,
    assistiveTextId,
    statusIcon,
    isRequired,
  } = useFormFieldContext();

  function getEndEnhancer() {
    if (!statusIcon) {
      return endEnhancer;
    }
    if (endEnhancer) {
      return (
        <>
          {statusIcon} <Block spaceInline="space020" /> {endEnhancer}{' '}
        </>
      );
    }
    return statusIcon;
  }

  return (
    <TextField
      aria-required={isRequired || undefined}
      aria-invalid={state === 'invalid' ? 'true' : 'false'}
      name={name}
      state={state}
      size={size}
      onChange={composeEventHandlers([onChange, onChangeContext])}
      onBlur={composeEventHandlers([onBlur, onBlurContext])}
      ref={composeRefs(ref, inputRef)}
      endEnhancer={getEndEnhancer()}
      id={id}
      aria-describedby={assistiveTextId}
      {...props}
    />
  );
});

export const FormInputLabel = ({children, ...props}: LabelProps) => {
  const {size, state, id, labelId} = useFormFieldContext();

  return (
    <Label id={labelId} size={size} state={state} htmlFor={id} {...props}>
      {children}
    </Label>
  );
};

export const FormInputSelect = React.forwardRef<HTMLInputElement, SelectProps>(
  ({children, onChange, onBlur, ...props}, inputRef) => {
    const {
      size,
      name,
      state,
      onChange: onChangeContext,
      onBlur: onBlurContext,
      ref,
      id,
      assistiveTextId,
      labelId,
      statusIcon,
      isRequired,
    } = useFormFieldContext();

    return (
      <Select
        name={name}
        state={state}
        size={size}
        aria-labelledby={`${labelId} ${id}`}
        validationIcon={statusIcon}
        onChange={composeEventHandlers([onChange, onChangeContext])}
        onBlur={composeEventHandlers([onBlur, onBlurContext])}
        ref={composeRefs(ref, inputRef)}
        id={id}
        aria-describedby={assistiveTextId}
        required={isRequired || undefined}
        {...props}
      >
        {children}
      </Select>
    );
  },
);

export const FormInputAssistiveText = ({
  children,
  validationIcon = false,
  overrides,
  ...props
}: AssistiveTextProps & {validationIcon?: boolean}) => {
  const {
    size,
    state,
    error,
    assistiveTextId,
    setAssistiveTextId,
    id,
  } = useFormFieldContext();

  useEffect(() => {
    if (setAssistiveTextId) {
      setAssistiveTextId(
        state === 'invalid' ? `${id}-error-text` : `${id}-assistive-text`,
      );
    }
  }, [state, id, setAssistiveTextId]);

  const theme = useTheme();

  const validationIconSize = getToken(
    {theme, overrides: {}},
    `assistiveText.${size}.startEnhancer`,
    'startEnhancer',
    'iconSize',
  );

  const statusIcon = getStatusIcon({state, iconSize: validationIconSize});

  return (
    <AssistiveText
      size={size}
      state={state}
      id={assistiveTextId}
      startEnhancer={validationIcon ? statusIcon : undefined}
      overrides={overrides}
      {...props}
    >
      {error || children}
    </AssistiveText>
  );
};

export const FormInputCheckbox = React.forwardRef<
  HTMLInputElement,
  CheckboxProps
>(({children, onChange, onBlur, ...props}, inputRef) => {
  const {
    size,
    name,
    state,
    onChange: onChangeContext,
    onBlur: onBlurContext,
    ref,
    id,
    assistiveTextId,
    isRequired,
  } = useFormFieldContext();

  return (
    <Checkbox
      name={name}
      state={state}
      size={size}
      onChange={composeEventHandlers([onChange, onChangeContext])}
      onBlur={composeEventHandlers([onBlur, onBlurContext])}
      ref={composeRefs(ref, inputRef)}
      id={id}
      aria-describedby={assistiveTextId}
      aria-required={isRequired || undefined}
      {...props}
    />
  );
});

export const FormInputRadioButton = React.forwardRef<
  HTMLInputElement,
  CheckboxProps
>(({children, onChange, onBlur, ...props}, inputRef) => {
  const {
    size,
    name,
    state,
    onChange: onChangeContext,
    onBlur: onBlurContext,
    ref,
    id,
    assistiveTextId,
    isRequired,
  } = useFormFieldContext();

  return (
    <RadioButton
      name={name}
      state={state}
      size={size}
      onChange={composeEventHandlers([onChange, onChangeContext])}
      onBlur={composeEventHandlers([onBlur, onBlurContext])}
      ref={composeRefs(ref, inputRef)}
      id={id}
      aria-describedby={assistiveTextId}
      aria-required={isRequired || undefined}
      {...props}
    />
  );
});
